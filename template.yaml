AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:

  BackendApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: BackendApi
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /v1/room/token:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RoomCreateToken.Arn}/invocations
              responses: {}

          /v1/room/link:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LinkRoomUser.Arn}/invocations
              responses: {}

          /v1/twilio-event:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TwilioDispatcher.Arn}/invocations
              responses: {}

          /v1/appointments/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAppointmentById.Arn}/invocations
              responses: {}

            patch:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RescheduleAppointmentById.Arn}/invocations
              responses: {}

            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CancelAppointmentById.Arn}/invocations
              responses: {}

          /v1/appointments/:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateAppointment.Arn}/invocations
              responses: {}

          /v1/appointment-slots/{typeId}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAppointmentBatchSlots.Arn}/invocations
              responses: {}

          /v1/appointment-slots/{typeId}/{date}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAppointmentDateSlots.Arn}/invocations
              responses: {}

          /v1/self-record-interview/answer/:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateInterviewAnswer.Arn}/invocations
              responses: {}

          /v1/save-interview/{id}:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SaveInterview.Arn}/invocations
              responses: {}

          /v1/complete-interview/{id}:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CompleteInterview.Arn}/invocations
              responses: {}

          /v1/task/{key}:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTask.Arn}/invocations
              responses: {}

          /v1/start-self-record:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StartSelfRecord.Arn}/invocations
              responses: {}

          /v1/self-record-questions/{taskId}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetSelfRecordQuestions.Arn}/invocations
              responses: {}

          /v1/interviewers-questions/{taskId}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetInterviewersQuestions.Arn}/invocations
              responses: {}

          /v1/phone/answer:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PhoneAnswer.Arn}/invocations
              responses: {}

          /v1/phone/connect-room:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PhoneConnectRoom.Arn}/invocations
              responses: {}

          /thiscovery/v1/user-interview-tasks/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MockUserTask.Arn}/invocations
              responses: {}
          
          /thiscovery/v1/interview-tasks/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MockTask.Arn}/invocations
              responses: {}

          /thiscovery/v1/interview-questions/{id}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MockQuestions.Arn}/invocations
              responses: {}

      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      MinimumCompressionSize: 1000
      Cors:
        AllowHeaders: '''*'''
        AllowOrigin: '''*'''
      BinaryMediaTypes:
        - multipart~1*form-data

  RoomCreateToken:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Rooms-RoomCreateToken
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: RoomCreateToken
      CodeUri: src
      Handler: room_token.lambda_handler
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Events:
        BackendApiPOSTv1roomtoken:
          Type: Api
          Properties:
            Path: /v1/room/token
            Method: POST
            RestApiId: !Ref BackendApi
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          TWILIO_ACCOUNT_SID: !Ref EnvConfigtwilioaccountsidAsString

  LinkRoomUser:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Rooms-LinkRoomUser
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: LinkRoomUser
      CodeUri: src
      Handler: room_link.lambda_handler
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref InterviewsTable
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
        - EventBridgePutEventsPolicy:
            EventBusName: thiscovery-event-bus
      Events:
        BackendApiPOSTv1roomlink:
          Type: Api
          Properties:
            Path: /v1/room/link
            Method: POST
            RestApiId: !Ref BackendApi
      Environment:
        Variables:
          TABLE_NAME: !Ref InterviewsTable
          TABLE_ARN: !GetAtt InterviewsTable.Arn
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          TWILIO_ACCOUNT_SID: !Ref EnvConfigtwilioaccountsidAsString

  GetAppointmentBatchSlots:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Appointments-GetAppointmentBatchSlots
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GetAppointmentBatchSlots
      CodeUri: src
      Handler: get_appointment_batch_slots.lambda_handler
      Runtime: python3.8
      MemorySize: 2048
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Events:
        BackendApiGETv1appointmentsidslots:
          Type: Api
          Properties:
            Path: /v1/appointment-slots/{typeId}
            Method: GET
            RestApiId: !Ref BackendApi
      Environment:
        Variables:
          APPOINTMENT_DEFAULT_DAYS: !Ref EnvConfigAppointmentsDefaultDaysAsString
          APPOINTMENT_START_HOUR: !Ref EnvConfigAppointmentsStartHourAsString
          APPOINTMENT_END_HOUR: !Ref EnvConfigAppointmentsEndHourAsString
          APPOINTMENT_INTERVAL_MIN: !Ref EnvConfigAppointmentsIntervalMinAsString
          ACUITY_BASE_URI: !Ref EnvConfigAcuityBaseUriAsString
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/

  GetAppointmentDateSlots:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Appointments-GetAppointmentDateSlots
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GetAppointmentDateSlots
      CodeUri: src
      Handler: get_appointment_date_slots.lambda_handler
      Runtime: python3.8
      MemorySize: 2048
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Events:
        BackendApiGETv1appointmentsidslotsdate:
          Type: Api
          Properties:
            Path: /v1/appointment-slots/{typeId}/{date}
            Method: GET
            RestApiId: !Ref BackendApi
      Environment:
        Variables:
          APPOINTMENT_DEFAULT_DAYS: !Ref EnvConfigAppointmentsDefaultDaysAsString
          APPOINTMENT_START_HOUR: !Ref EnvConfigAppointmentsStartHourAsString
          APPOINTMENT_END_HOUR: !Ref EnvConfigAppointmentsEndHourAsString
          APPOINTMENT_INTERVAL_MIN: !Ref EnvConfigAppointmentsIntervalMinAsString
          ACUITY_BASE_URI: !Ref EnvConfigAcuityBaseUriAsString
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/

  CancelAppointmentById:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Appointments-CancelAppointmentById
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: CancelAppointmentById
      CodeUri: src
      Handler: cancel_appointment.lambda_handler
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref InterviewsTable
        - EventBridgePutEventsPolicy:
            EventBusName: thiscovery-event-bus
      Events:
        BackendApiDELETEv1appointmentsid:
          Type: Api
          Properties:
            Path: /v1/appointments/{id}
            Method: DELETE
            RestApiId: !Ref BackendApi
      Environment:
        Variables:
          TABLE_NAME: !Ref InterviewsTable
          TABLE_ARN: !GetAtt InterviewsTable.Arn
          ACUITY_BASE_URI: !Ref EnvConfigAcuityBaseUriAsString
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          APP_BASE_URL: !Ref EnvConfigappbaseurlAsString

  RescheduleAppointmentById:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Appointments-RescheduleAppointmentById
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: RescheduleAppointmentById
      CodeUri: src
      Handler: reschedule_appointment.lambda_handler
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref InterviewsTable
        - EventBridgePutEventsPolicy:
            EventBusName: thiscovery-event-bus
      Events:
        BackendApiPATCHv1appointmentsid:
          Type: Api
          Properties:
            Path: /v1/appointments/{id}
            Method: PATCH
            RestApiId: !Ref BackendApi
      Environment:
        Variables:
          TABLE_NAME: !Ref InterviewsTable
          TABLE_ARN: !GetAtt InterviewsTable.Arn
          ACUITY_BASE_URI: !Ref EnvConfigAcuityBaseUriAsString
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          APP_BASE_URL: !Ref EnvConfigappbaseurlAsString

  CreateAppointment:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Appointments-CreateAppointment
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: CreateAppointment
      CodeUri: src
      Handler: book_appointment.lambda_handler
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
        - DynamoDBCrudPolicy:
            TableName: !Ref InterviewsTable
        - EventBridgePutEventsPolicy:
            EventBusName: thiscovery-event-bus
      Events:
        BackendApiPOSTv1appointments:
          Type: Api
          Properties:
            Path: /v1/appointments/
            Method: POST
            RestApiId: !Ref BackendApi
      Environment:
        Variables:
          TABLE_NAME: !Ref InterviewsTable
          TABLE_ARN: !GetAtt InterviewsTable.Arn
          ACUITY_BASE_URI: !Ref EnvConfigAcuityBaseUriAsString
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          APP_BASE_URL: !Ref EnvConfigappbaseurlAsString
          POSTMARK_TOKEN: !Ref EnvConfigPostmarkTokenAsString

  GetAppointmentById:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Appointments-GetAppointmentById
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GetAppointmentById
      CodeUri: src
      Handler: get_appointment.lambda_handler
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 5
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref InterviewsTable
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Events:
        BackendApiGETv1appointments:
          Type: Api
          Properties:
            Path: /v1/appointments/{id}
            Method: GET
            RestApiId: !Ref BackendApi
      Environment:
        Variables:
          TABLE_NAME: !Ref InterviewsTable
          TABLE_ARN: !GetAtt InterviewsTable.Arn
          APP_BASE_URL: !Ref EnvConfigappbaseurlAsString
          THISCOVERY_API_BASE_URL: !Ref EnvConfigthiscourlAsString
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/

  CreateInterviewAnswer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Interviews-CreateInterviewAnswer
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: CreateInterviewAnswer
      CodeUri: src
      Handler: create_interview_answer.lambda_handler
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref InterviewsTable
        - S3CrudPolicy:
            BucketName: !Ref InterviewAssets
        - EventBridgePutEventsPolicy:
            EventBusName: thiscovery-event-bus
      Events:
        BackendApiPOSTv1selfrecordinterviewanswer:
          Type: Api
          Properties:
            Path: /v1/self-record-interview/answer/
            Method: POST
            RestApiId: !Ref BackendApi
      Environment:
        Variables:
          TABLE_NAME: !Ref InterviewsTable
          TABLE_ARN: !GetAtt InterviewsTable.Arn
          BUCKET_NAME: !Ref InterviewAssets
          BUCKET_ARN: !GetAtt InterviewAssets.Arn

  SaveInterview:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Interviews-SaveInterview
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: SaveInterview
      CodeUri: src
      Handler: save_interview.lambda_handler
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 10
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref InterviewsTable
        - EventBridgePutEventsPolicy:
            EventBusName: thiscovery-event-bus
      Events:
        BackendApiPOSTv1saveinterview:
          Type: Api
          Properties:
            Path: /v1/save-interview/{id}
            Method: POST
            RestApiId: !Ref BackendApi
      Environment:
        Variables:
          TABLE_NAME: !Ref InterviewsTable
          TABLE_ARN: !GetAtt InterviewsTable.Arn

  CompleteInterview:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Interviews-CompleteInterview
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: CompleteInterview
      CodeUri: src
      Handler: complete_interview.lambda_handler
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 10
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref InterviewsTable
        - EventBridgePutEventsPolicy:
            EventBusName: thiscovery-event-bus
      Events:
        BackendApiPOSTv1completeinterview:
          Type: Api
          Properties:
            Path: /v1/complete-interview/{id}
            Method: POST
            RestApiId: !Ref BackendApi
      Environment:
        Variables:
          TABLE_NAME: !Ref InterviewsTable
          TABLE_ARN: !GetAtt InterviewsTable.Arn

  GetTask:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Tasks-GetTask
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GetTask
      CodeUri: src
      Handler: get_task.lambda_handler
      Runtime: python3.8
      MemorySize: 512
      Timeout: 5
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref InterviewsTable
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Events:
        BackendApiGETv1gettask:
          Type: Api
          Properties:
            Path: /v1/task/{key}
            Method: POST
            RestApiId: !Ref BackendApi
      Environment:
        Variables:
          TABLE_NAME: !Ref InterviewsTable
          TABLE_ARN: !GetAtt InterviewsTable.Arn
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          THISCOVERY_API_BASE_URL: !Ref EnvConfigthiscourlAsString

  StartSelfRecord:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Interviews-StartSelfRecord
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: StartSelfRecord
      CodeUri: src
      Handler: start_interview.lambda_handler
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 5
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - DynamoDBCrudPolicy:
            TableName: !Ref InterviewsTable
        - EventBridgePutEventsPolicy:
            EventBusName: thiscovery-event-bus
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Environment:
        Variables:
          TABLE_NAME: !Ref InterviewsTable
          TABLE_ARN: !GetAtt InterviewsTable.Arn
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          THISCOVERY_API_BASE_URL: !Ref EnvConfigthiscourlAsString
      Events:
        BackendApiPOSTv1startselfrecord:
          Type: Api
          Properties:
            Path: /v1/start-self-record
            Method: POST
            RestApiId: !Ref BackendApi

  GetSelfRecordQuestions:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Tasks-GetSelfRecordQuestions
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GetSelfRecordQuestions
      CodeUri: src
      Handler: get_self_record_questions.lambda_handler
      Runtime: python3.8
      MemorySize: 512
      Timeout: 5
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          THISCOVERY_API_BASE_URL: !Ref EnvConfigthiscourlAsString
      Events:
        BackendApiGETv1selfrecordquestions:
          Type: Api
          Properties:
            Path: /v1/self-record-questions/{taskId}
            Method: GET
            RestApiId: !Ref BackendApi

  GetInterviewersQuestions:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Tasks-GetInterviewersQuestions
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GetInterviewersQuestions
      CodeUri: src
      Handler: get_interviewers_questions.lambda_handler
      Runtime: python3.8
      MemorySize: 512
      Timeout: 5
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          THISCOVERY_API_BASE_URL: !Ref EnvConfigthiscourlAsString
      Events:
        BackendApiGETv1interviewersquestions:
          Type: Api
          Properties:
            Path: /v1/interviewers-questions/{taskId}
            Method: GET
            RestApiId: !Ref BackendApi

  HandleUploadedVideo:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Interviews-HandleUploadedVideo
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: HandleUploadedVideo
      CodeUri: src
      Handler: video_handler.lambda_handler
      Runtime: python3.8
      MemorySize: 2048
      Timeout: 60
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - S3CrudPolicy:
            BucketName: !Ref InterviewAssets
        - EventBridgePutEventsPolicy:
            EventBusName: thiscovery-event-bus
      Layers:
        - !Ref VideoProccessingLayer

  TwilioDispatcher:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Interviews-TwilioDispatcher
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: TwilioDispatcher
      CodeUri: src
      Handler: twilio_event_dispatcher.lambda_handler
      Runtime: python3.8
      MemorySize: 512
      Timeout: 5
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - EventBridgePutEventsPolicy:
            EventBusName: thiscovery-event-bus
      Events:
        BackendApiPOSTv1TwilioEvent:
          Type: Api
          Properties:
            Path: /v1/twilio-event
            Method: POST
            RestApiId: !Ref BackendApi

  HandleLiveRecording:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Interviews-HandleLiveRecording
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: HandleLiveRecording
      CodeUri: src
      Handler: live_recording.lambda_handler
      Runtime: python3.8
      MemorySize: 2048
      Timeout: 60
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - S3CrudPolicy:
            BucketName: !Ref InterviewAssets
        - DynamoDBCrudPolicy:
            TableName: !Ref InterviewsTable
        - EventBridgePutEventsPolicy:
            EventBusName: thiscovery-event-bus
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          BUCKET_NAME: !Ref InterviewAssets
          BUCKET_ARN: !GetAtt InterviewAssets.Arn
          TABLE_NAME: !Ref InterviewsTable
          TABLE_ARN: !GetAtt InterviewsTable.Arn
          ACUITY_BASE_URI: !Ref EnvConfigAcuityBaseUriAsString
      Events:
        EventRule:
          Type: EventBridgeRule
          Properties:
            EventBusName: thiscovery-event-bus
            Pattern:
              source:
                - thiscovery_video
              detail-type:
                - twilio_composition_available

  PhoneAnswer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Interviews-PhoneAnswer
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: PhoneAnswer
      CodeUri: functions/phone
      Handler: answer_phone.lambda_handler
      Runtime: python3.8
      MemorySize: 2048
      Timeout: 60
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - S3CrudPolicy:
            BucketName: !Ref InterviewAssets
        - DynamoDBCrudPolicy:
            TableName: !Ref InterviewsTable
        - EventBridgePutEventsPolicy:
            EventBusName: thiscovery-event-bus
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          BUCKET_NAME: !Ref InterviewAssets
          BUCKET_ARN: !GetAtt InterviewAssets.Arn
          TABLE_NAME: !Ref InterviewsTable
          TABLE_ARN: !GetAtt InterviewsTable.Arn
          ACUITY_BASE_URI: !Ref EnvConfigAcuityBaseUriAsString
      Events:
        BackendApiPOSTv1TwilioEvent:
          Type: Api
          Properties:
            Path: /v1/phone/answer
            Method: POST
            RestApiId: !Ref BackendApi

  PhoneConnectRoom:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Interviews-PhoneConnectRoom
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: PhoneConnectRoom
      CodeUri: functions/phone
      Handler: connect_room.lambda_handler
      Runtime: python3.8
      MemorySize: 2048
      Timeout: 60
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - S3CrudPolicy:
            BucketName: !Ref InterviewAssets
        - DynamoDBCrudPolicy:
            TableName: !Ref InterviewsTable
        - EventBridgePutEventsPolicy:
            EventBusName: thiscovery-event-bus
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Sub arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:/${EnvironmentTagName}/*
      Environment:
        Variables:
          SECRETS_NAMESPACE: !Sub /${EnvironmentTagName}/
          BUCKET_NAME: !Ref InterviewAssets
          BUCKET_ARN: !GetAtt InterviewAssets.Arn
          TABLE_NAME: !Ref InterviewsTable
          TABLE_ARN: !GetAtt InterviewsTable.Arn
          ACUITY_BASE_URI: !Ref EnvConfigAcuityBaseUriAsString
      Events:
        BackendApiPOSTv1TwilioEvent:
          Type: Api
          Properties:
            Path: /v1/phone/connect-room
            Method: POST
            RestApiId: !Ref BackendApi
  
  MockUserTask:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Mock-UserTask
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: MockUserTask
      CodeUri: src
      Handler: thiscovery_test.user_interview_tasks
      Runtime: python3.8
      MemorySize: 512
      Timeout: 1
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        BackendApiGETv1thisusertasks:
          Type: Api
          Properties:
            Path: /thiscovery/v1/user-interview-tasks/{id}
            Method: GET
            RestApiId: !Ref BackendApi
  
  MockTask:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Mock-Task
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: MockTask
      CodeUri: src
      Handler: thiscovery_test.interview_tasks
      Runtime: python3.8
      MemorySize: 512
      Timeout: 1
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        BackendApiGETv1thistasks:
          Type: Api
          Properties:
            Path: /thiscovery/v1/interview-tasks/{id}
            Method: GET
            RestApiId: !Ref BackendApi

  MockQuestions:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: Mock-Questions
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: MockQuestions
      CodeUri: src
      Handler: thiscovery_test.interview_questions
      Runtime: python3.8
      MemorySize: 512
      Timeout: 1
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        BackendApiGETv1thistasks:
          Type: Api
          Properties:
            Path: /thiscovery/v1/interview-questions/{id}
            Method: GET
            RestApiId: !Ref BackendApi

  VideoProccessingLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: VideoProccessingLayer
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Layer ${ResourceName}
        - ResourceName: VideoProccessingLayer
      ContentUri: layers/video_proccessing
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: makefile

  Cdn:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: Serves Thiscovery frontend
        DefaultCacheBehavior:
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          Compress: true
          TargetOriginId: FrontendAssetsS3
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 10
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 10
        PriceClass: PriceClass_100
        HttpVersion: http2
        Origins:
          - DomainName: !GetAtt FrontendAssets.RegionalDomainName
            Id: FrontendAssetsS3
            S3OriginConfig:
              OriginAccessIdentity: !Sub
                - origin-access-identity/cloudfront/${OriginAccessIdentity}
                - OriginAccessIdentity: !Ref CdnOriginAccessIdentity

  CdnOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: FrontendAssetsIdentity

  BuildFrontend:
    Type: AWS::CodeBuild::Project
    Metadata:
      StackeryType: website
    DependsOn: BuildFrontendRole
    Properties:
      Name: !Sub ${AWS::StackName}-BuildFrontend
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: API_URL
            Value: !Sub https://${BackendApi}.execute-api.${AWS::Region}.amazonaws.com/${BackendApi.Stage}
          - Name: JS_ENV_FILE
            Value: !Ref EnvConfigjsbuildAsString
      ServiceRole: !GetAtt BuildFrontendRole.Arn
      Source:
        Type: NO_SOURCE
        BuildSpec: !Sub
          - |-
            version: 0.2
            phases:
              install:
                runtime-versions:
                  nodejs: 12
                commands:
                  - |
                    _SOURCE_LOCATION="${SourceLocation}"
                    if [ s3 != "${!_SOURCE_LOCATION%%:*}" ]; then
                      git clone "${SourceLocation}" repo
                      cd repo
                      git checkout "${SourceVersion}"
                    else
                      aws s3 cp "${SourceLocation}" repo.tgz
                      tar --strip-components 1 -xvvzf repo.tgz
                    fi
                  - cd ${SourceDirectory}
              pre_build:
                commands:
                  - npm install
              build:
                commands:
                  - "echo \"$JS_ENV_FILE\" > src/app.env.js"
                  - ${BuildCommand}
              post_build:
                commands:
                  - if [ $CODEBUILD_BUILD_SUCCEEDING == 0 ]; then exit 1; fi
                  - |
                    _SOURCE_LOCATION=${SourceLocation}
                    if [ s3 != "${!_SOURCE_LOCATION%%:*}" ]; then
                      cd "${!CODEBUILD_SRC_DIR}/repo"
                    else
                      cd "${!CODEBUILD_SRC_DIR}"
                    fi
                  - aws s3 sync '${PublishDirectory}' 's3://${DestinationBucketName}' --acl public-read --cache-control 'max-age=0, must-revalidate, public' --no-progress --delete
          - PublishDirectory: app/public
            BuildCommand: npx mix --production
            SourceDirectory: app
            DestinationBucketName: !Ref FrontendAssets
      Tags:
        - Key: Stackery Project Type
          Value: Website Builder

  BuildFrontendEvents:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codebuild
        detail-type:
          - CodeBuild Build State Change
        detail:
          build-status:
            - SUCCEEDED
            - FAILED
            - FAULT
            - STOPPPED
            - TIMED_OUT
          project-name:
            - !Ref BuildFrontend
      Targets:
        - Arn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
          Id: StackeryAgentCommander

  BuildFrontendEventsPermission:
    Type: AWS::Lambda::Permission
    DependsOn: BuildFrontendEvents
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      Principal: events.amazonaws.com
      SourceArn: !GetAtt BuildFrontendEvents.Arn

  BuildFrontendRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-BuildFrontend
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: Logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-BuildFrontend:log-stream:*
        - PolicyName: DownloadSourceFromStackeryAssetsBucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource: arn:aws:s3:::stackery-assetsbucket-*/*
        - PolicyName: UploadToDestinationObjectStore
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - !Sub ${FrontendAssets.Arn}/*
                  - !Sub ${FrontendAssets.Arn}

  BuildFrontendBuildTrigger:
    Type: Custom::StackeryWebsiteBuildTrigger
    DependsOn: BuildFrontendEvents
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      Type: website
      ProjectName: !Ref BuildFrontend
      SourceVersion: !Ref SourceVersion

  FrontendAssets:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub frontend-assets-${AWS::AccountId}
      WebsiteConfiguration:
        IndexDocument: index.html

  InterviewAssets:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub interview-assets-${AWS::AccountId}

  ThiscoveryS3AccessPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref InterviewAssets
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub ${InterviewAssets.Arn}/*
            Principal: 
              AWS: !Sub
                - arn:aws:iam::${ThiscoveryAccount}:root
                - { ThiscoveryAccount: !Ref EnvConfigThiscoveryAccount }

  InterviewsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Interviews
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  EnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)
  SourceLocation:
    Type: String
    Description: Location of source code for deployment (injected by Stackery at deployment time)
  SourceVersion:
    Type: String
    Description: Source version for deployment (injected by Stackery at deployment time)
  EnvConfigThiscoveryAccount:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/thiscovery-account
  EnvConfigAppointmentsDefaultDaysAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/appointments/default-days
  EnvConfigAppointmentsStartHourAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/appointments/start-hour
  EnvConfigAppointmentsEndHourAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/appointments/end-hour
  EnvConfigAppointmentsIntervalMinAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/appointments/interval-min
  EnvConfigAcuityBaseUriAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/acuity/base-uri
  EnvConfigtwilioaccountsidAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/twilio/account-sid
  EnvConfigjsbuildAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/js-build
  EnvConfigappbaseurlAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/app/base-url
  EnvConfigthiscourlAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/app/thiscovery-base-url
  EnvConfigPostmarkTokenAsString:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /<EnvironmentName>/postmark/token

Metadata:
  EnvConfigParameters:
    EnvConfigThiscoveryAccount: thiscovery-account
    EnvConfigAppointmentsDefaultDaysAsString: appointments.default-days
    EnvConfigAppointmentsStartHourAsString: appointments.start-hour
    EnvConfigAppointmentsEndHourAsString: appointments.end-hour
    EnvConfigAppointmentsIntervalMinAsString: appointments.interval-min
    EnvConfigAcuityBaseUriAsString: acuity.base-uri
    EnvConfigtwilioaccountsidAsString: twilio.account-sid
    EnvConfigjsbuildAsString: js-build
    EnvConfigappbaseurlAsString: app.base-url
    EnvConfigthiscourlAsString: app.thiscovery-base-url
    EnvConfigPostmarkTokenAsString: postmark.token
