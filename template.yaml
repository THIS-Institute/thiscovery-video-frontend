AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  BackendHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      DefinitionBody:
        openapi: '3.0'
        info:
          title: !Sub ${AWS::StackName}-BackendHttpApi
          version: '1.0'
        paths:
          /v1/room/token:
            post:
              responses: {}
            options:
              responses: {}
      FailOnWarnings: true
      CorsConfiguration:
        AllowOrigins:
          - '*'
        AllowMethods:
          - '*'
  RoomCreateToken:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-RoomCreateToken
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: RoomCreateToken
      CodeUri: src
      Handler: room_token.lambda_handler
      Runtime: python3.8
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        BackendHttpApiPOSTv1roomtoken:
          Type: HttpApi
          Properties:
            Path: /v1/room/token
            Method: POST
            ApiId: !Ref BackendHttpApi
            PayloadFormatVersion: '2.0'
            TimeoutInMillis: 10000
  DefaultResponse:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-DefaultResponse
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: DefaultResponse
      CodeUri: src
      Handler: default_response.lambda_handler
      Runtime: python3.8
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        BackendHttpApiOPTIONSroomtoken:
          Type: HttpApi
          Properties:
            Path: /v1/room/token
            Method: OPTIONS
            ApiId: !Ref BackendHttpApi
            PayloadFormatVersion: '2.0'
            TimeoutInMillis: 10000
  TestApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub
        - ${ResourceName} From Stack ${StackTagName} Environment ${EnvironmentTagName}
        - ResourceName: TestApi
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetTest.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      Cors:
        AllowHeaders: '''Authorization,Content-Type'''
        AllowOrigin: '''*'''
  GetTest:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-GetTest
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GetTest
      CodeUri: src
      Handler: test.lambda_handler
      Runtime: python3.8
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        TestApiPOST:
          Type: Api
          Properties:
            Path: /
            Method: POST
            RestApiId: !Ref TestApi
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
