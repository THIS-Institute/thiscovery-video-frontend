AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  BackendApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: BackendApi
      StageName: !Ref EnvironmentAPIGatewayStageName
      DefinitionBody:
        swagger: '2.0'
        info: {}
        paths:
          /v1/room/token:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RoomCreateToken.Arn}/invocations
              responses: {}
          /v1/appointments/{id}:
            patch:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RescheduleAppointmentById.Arn}/invocations
              responses: {}
            delete:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CancelAppointmentById.Arn}/invocations
              responses: {}
          /v1/appointments/{typeId}/slots:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAppointmentBatchSlots.Arn}/invocations
              responses: {}
          /v1/appointments/{typeId}/slots/{date}:
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAppointmentDateSlots.Arn}/invocations
              responses: {}
          /v1/appointments/:
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri: !Sub arn:${AWS::Partition}:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreateAppointment.Arn}/invocations
              responses: {}
      EndpointConfiguration: REGIONAL
      TracingEnabled: true
      MinimumCompressionSize: 1000
      Cors:
        AllowHeaders: '''*'''
        AllowOrigin: '''*'''
  RoomCreateToken:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackTagName}-RoomCreateToken
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: RoomCreateToken
      CodeUri: src
      Handler: room_token.lambda_handler
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        BackendApiPOSTv1roomtoken:
          Type: Api
          Properties:
            Path: /v1/room/token
            Method: POST
            RestApiId: !Ref BackendApi
  GetAppointmentBatchSlots:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackTagName}-GetAppointmentBatchSlots
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GetAppointmentBatchSlots
      CodeUri: src
      Handler: get_appointment_batch_slots.lambda_handler
      Runtime: python3.8
      MemorySize: 2048
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        BackendApiGETv1appointmentsidslots:
          Type: Api
          Properties:
            Path: /v1/appointments/{typeId}/slots
            Method: GET
            RestApiId: !Ref BackendApi
  GetAppointmentDateSlots:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackTagName}-GetAppointmentDateSlots
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: GetAppointmentDateSlots
      CodeUri: src
      Handler: get_appointment_date_slots.lambda_handler
      Runtime: python3.8
      MemorySize: 2048
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        BackendApiGETv1appointmentsidslotsdate:
          Type: Api
          Properties:
            Path: /v1/appointments/{typeId}/slots/{date}
            Method: GET
            RestApiId: !Ref BackendApi
  CancelAppointmentById:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackTagName}-CancelAppointmentById
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: CancelAppointmentById
      CodeUri: src
      Handler: log.lambda_handler
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        BackendApiDELETEv1appointmentsid:
          Type: Api
          Properties:
            Path: /v1/appointments/{id}
            Method: DELETE
            RestApiId: !Ref BackendApi
  RescheduleAppointmentById:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackTagName}-RescheduleAppointmentBy
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: RescheduleAppointmentById
      CodeUri: src
      Handler: log.lambda_handler
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        BackendApiPATCHv1appointmentsid:
          Type: Api
          Properties:
            Path: /v1/appointments/{id}
            Method: PATCH
            RestApiId: !Ref BackendApi
  CreateAppointment:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackTagName}-CreateAppointment
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: CreateAppointment
      CodeUri: src
      Handler: log.lambda_handler
      Runtime: python3.8
      MemorySize: 1024
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
      Events:
        BackendApiPOSTv1appointments:
          Type: Api
          Properties:
            Path: /v1/appointments/
            Method: POST
            RestApiId: !Ref BackendApi
  Cdn:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: Serves Thiscovery frontend
        DefaultCacheBehavior:
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          Compress: true
          TargetOriginId: FrontendAssetsS3
          ViewerProtocolPolicy: redirect-to-https
        Enabled: true
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 10
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
            ErrorCachingMinTTL: 10
        PriceClass: PriceClass_100
        HttpVersion: http2
        Origins:
          - DomainName: !GetAtt FrontendAssets.RegionalDomainName
            Id: FrontendAssetsS3
            S3OriginConfig:
              OriginAccessIdentity: !Sub
                - origin-access-identity/cloudfront/${OriginAccessIdentity}
                - OriginAccessIdentity: !Ref CdnOriginAccessIdentity
  CdnOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: FrontendAssetsIdentity
  BuildFrontend:
    Type: AWS::CodeBuild::Project
    Metadata:
      StackeryType: website
    DependsOn: BuildFrontendRole
    Properties:
      Name: !Sub ${AWS::StackName}-BuildFrontend
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux2-x86_64-standard:3.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: API_URL
            Value: !Sub https://${BackendApi}.execute-api.${AWS::Region}.amazonaws.com/${BackendApi.Stage}
      ServiceRole: !GetAtt BuildFrontendRole.Arn
      Source:
        Type: NO_SOURCE
        BuildSpec: !Sub
          - |-
            version: 0.2
            phases:
              install:
                runtime-versions:
                  nodejs: 12
                commands:
                  - |
                    _SOURCE_LOCATION="${SourceLocation}"
                    if [ s3 != "${!_SOURCE_LOCATION%%:*}" ]; then
                      git clone "${SourceLocation}" repo
                      cd repo
                      git checkout "${SourceVersion}"
                    else
                      aws s3 cp "${SourceLocation}" repo.tgz
                      tar --strip-components 1 -xvvzf repo.tgz
                    fi
                  - cd ${SourceDirectory}
              pre_build:
                commands:
                  - npm install
              build:
                commands:
                  - "echo \"export default {backendApiHost: '$API_URL'};\" > src/app.env.js"
                  - ${BuildCommand}
              post_build:
                commands:
                  - if [ $CODEBUILD_BUILD_SUCCEEDING == 0 ]; then exit 1; fi
                  - |
                    _SOURCE_LOCATION=${SourceLocation}
                    if [ s3 != "${!_SOURCE_LOCATION%%:*}" ]; then
                      cd "${!CODEBUILD_SRC_DIR}/repo"
                    else
                      cd "${!CODEBUILD_SRC_DIR}"
                    fi
                  - aws s3 sync '${PublishDirectory}' 's3://${DestinationBucketName}' --acl public-read --cache-control 'max-age=0, must-revalidate, public' --no-progress --delete
          - PublishDirectory: app/public
            BuildCommand: npx mix --production
            SourceDirectory: app
            DestinationBucketName: !Ref FrontendAssets
      Tags:
        - Key: Stackery Project Type
          Value: Website Builder
  BuildFrontendEvents:
    Type: AWS::Events::Rule
    Properties:
      EventPattern:
        source:
          - aws.codebuild
        detail-type:
          - CodeBuild Build State Change
        detail:
          build-status:
            - SUCCEEDED
            - FAILED
            - FAULT
            - STOPPPED
            - TIMED_OUT
          project-name:
            - !Ref BuildFrontend
      Targets:
        - Arn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
          Id: StackeryAgentCommander
  BuildFrontendEventsPermission:
    Type: AWS::Lambda::Permission
    DependsOn: BuildFrontendEvents
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      Principal: events.amazonaws.com
      SourceArn: !GetAtt BuildFrontendEvents.Arn
  BuildFrontendRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-BuildFrontend
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: Logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${AWS::StackName}-BuildFrontend:log-stream:*
        - PolicyName: DownloadSourceFromStackeryAssetsBucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: s3:GetObject
                Resource: arn:aws:s3:::stackery-assetsbucket-*/*
        - PolicyName: UploadToDestinationObjectStore
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:DeleteObject
                  - s3:GetBucketLocation
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:PutObject
                  - s3:PutObjectAcl
                Resource:
                  - !Sub ${FrontendAssets.Arn}/*
                  - !Sub ${FrontendAssets.Arn}
  BuildFrontendBuildTrigger:
    Type: Custom::StackeryWebsiteBuildTrigger
    DependsOn: BuildFrontendEvents
    Properties:
      ServiceToken: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:stackery-agent-commander
      Type: website
      ProjectName: !Ref BuildFrontend
      SourceVersion: !Ref SourceVersion
  FrontendAssets:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub frontend-assets-${AWS::AccountId}
      WebsiteConfiguration:
        IndexDocument: index.html
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  EnvironmentAPIGatewayStageName:
    Type: String
    Description: Environment name used for API Gateway Stage names (injected by Stackery at deployment time)
  SourceLocation:
    Type: String
    Description: Location of source code for deployment (injected by Stackery at deployment time)
  SourceVersion:
    Type: String
    Description: Source version for deployment (injected by Stackery at deployment time)
